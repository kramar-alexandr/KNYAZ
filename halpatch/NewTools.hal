external procedure ExtractObj(string,var Integer,var string);
external function Boolean PasteInvIn2OPr(var record OPVc,Integer,Date,Integer,val,var string,Boolean,var Boolean);
external procedure OPVc_PasteVECode(var record OPVc,Integer);
external procedure OPVc_PasteRecVal(var record OPVc,Integer);
external procedure NoDupObjs(string,var string);

/*global 
function Boolean LocMachDrawerVcRecordShouldBeSynchronised(record LocMachDrawerVc LocMachDrawerr,string tagstr)
begin
  Boolean res;
  
  res = true; LogText(0,"LocMachDrawerVcRecordShouldBeSynchronised");
  LocMachDrawerVcRecordShouldBeSynchronised = res;
  return;
end;

global 
function Boolean LocMachDrawerVcRecordSync(record LocMachDrawerVc LocMachDrawerr,string tagstr)
begin
  Boolean res;
  
  res = true; LogText(0,"LocMachDrawerVcRecordSync");
  LocMachDrawerVcRecordSync = res;
  return;
end;*/

global //Edit***************************Sasha2,11:22 22.09.2016 {
updating procedure CustomRegisterRemoveMn(record RcVc RepSpec)
begin
  record IVCashVc IVCashr;
  record POSEventVc POSEventr;
  record CashVc Cashr;
  record POSBalanceVc POSBalancer;
  record CashierBalVc CashierBalr;
  record CLInVc CLInr;
	record CLOutVc CLOutr;
	record IPVc IPr;
	record OPVc OPr;
	record IVVc IVr;
	record VIVc VIr;
	record POVc POr;
	record SHVc SHr;
	record PUVc PUr;
	record SDVc SDr;
	record StockMovVc StockMovr;
	record RetVc Retr;
	record RetPUVc RetPUr;
	record ORVc ORr;
	record TRVc TRr;
	record FBVc FBr;
	record ItemHistVc IHr;
	record ItemStatusVc ISr;
	record PPVc PPr;
	record CUVc CUr;
	record INVc INr;
	record APVc APr;
	record ARVc ARr;
	record OPrsVc OPrsr;
	record IPrsVc IPrsr;
	
	Boolean TrHs;
	

	while (LoopMain(IVCashr,1,true)) begin
		recorddelete(IVCashr);
		StepBack(IVCashr);
	end;
	
	TrHs = true;
	while (LoopMain(POSEventr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(POSEventr);
	    StepBack(POSEventr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(Cashr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(Cashr);
	    StepBack(Cashr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(POSBalancer,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(POSBalancer);
	    StepBack(POSBalancer);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(CashierBalr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(CashierBalr);
	    StepBack(CashierBalr);
	  end;
	end;

  TrHs = true;
	while (LoopMain(CLInr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(CLInr);
	    StepBack(CLInr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(CLOutr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(CLOutr);
	    StepBack(CLOutr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(IPr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(IPr);
	    StepBack(IPr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(IVr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(IVr);
	    StepBack(IVr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(VIr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(VIr);
	    StepBack(VIr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(POr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(POr);
	    StepBack(POr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(OPr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(OPr);
	    StepBack(OPr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(SHr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(SHr);
	    StepBack(SHr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(PUr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(PUr);
	    StepBack(PUr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(SDr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(SDr);
	    StepBack(SDr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(StockMovr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(StockMovr);
	    StepBack(StockMovr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(Retr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(Retr);
	    StepBack(Retr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(RetPUr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(RetPUr);
	    StepBack(RetPUr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(ORr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(ORr);
	    StepBack(ORr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(TRr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(TRr);
	    StepBack(TRr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(FBr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(FBr);
	    StepBack(FBr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(IHr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(IHr);
	    StepBack(IHr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(ISr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(ISr);
	    StepBack(ISr);
	  end;
	end;


	TrHs = true;
	while (LoopMain(PPr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(PPr);
	    StepBack(PPr);
	  end;
	end;

	TrHs = true;
	while (LoopMain(CUr,1,TrHs)) begin
		RecordDelete(CUr);
		StepBack(CUr);
	end;

	TrHs = true;
	while (LoopMain(INr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(INr);
	    StepBack(INr);
	  end;
	end; 
	
	TrHs = true;
	while (LoopMain(ARr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(ARr);
	    StepBack(ARr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(OPrsr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(OPrsr);
	    StepBack(OPrsr);
	  end;
	end; 
	
	TrHs = true;
	while (LoopMain(IPrsr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(IPrsr);
	    StepBack(IPrsr);
	  end;
	end; 

return;
end; //Edit***************************Sasha2,11:22 22.09.2016 }

global //Edit***************************Sasha2,11:22 22.09.2016 {
updating procedure POSRegistersRemoveMn(record RcVc RepSpec)
begin
  record IVCashVc IVCashr;
  record POSEventVc POSEventr;
  record CashVc Cashr;
  record POSBalanceVc POSBalancer;
  record CashierBalVc CashierBalr;
  record TRVc TRr;
	
	Boolean TrHs;
	

	while (LoopMain(IVCashr,1,true)) begin
		recorddelete(IVCashr);
		StepBack(IVCashr);
	end;

  TrHs = true;
	while (LoopMain(POSEventr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(POSEventr);
	    StepBack(POSEventr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(Cashr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(Cashr);
	    StepBack(Cashr);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(POSBalancer,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(POSBalancer);
	    StepBack(POSBalancer);
	  end;
	end;
	
	TrHs = true;
	while (LoopMain(CashierBalr,1,TrHs)) begin
	  if (TrHs) then begin
	    RecordDelete(CashierBalr);
	    StepBack(CashierBalr);
	  end;
	end;
	
	TrHs = true;
	TRr.IntYc = RestAccYc;
	while (LoopMain(TRr,1,TrHs)) begin
	 if (TRr.IntYc!=RestAccYc) then begin TrHs = false; end;
	 if (TrHs) then begin
	   RecordDelete(TRr);
	   StepBack(TRr);
	 end;
	end;

return;
end; //Edit***************************Sasha2,11:22 22.09.2016 }


global
function string 255 RetrieveStoreObject(var record ARVc APr) //for APSClass CalculatedColumn. APSClass uses APVc, but this function works with ARVc!
begin
  record VIVc VIr;
  record ObjVc Objr;
  string 20 storeObj,curObj;
  Integer pos;
  
    VIr.SerNr = APr.InvoiceNr;
    if (ReadFirstMain(VIr,1,true)) then begin
      pos = 0;
      ExtractObj(VIr.Objects,pos,curObj);
      while (nonblank(curObj)) begin
        Objr.Code = curObj;
        if (ReadFirstMain(Objr,1,true) and Objr.OTCode=="STORE") then begin
          storeObj = Objr.Code;
          pos = len(VIr.Objects);
        end;
        ExtractObj(VIr.Objects,pos,curObj);
      end;
    end;
  
  RetrieveStoreObject = storeObj;
  return;
end;

global
updating procedure GetItemStatusInfoForOrder(var record ORVc ORr)
BEGIN
  record ItemStatusVc ISr;
  row ORVc ORrw;
  Integer rwcnt,i;
  
    if (NonBlank(ORr.Location)) then begin
      rwcnt = MatRowCnt(ORr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(ORr,i,ORrw);
        if (NonBlank(ORrw.ArtCode)) then begin
          ISr.Code = ORrw.ArtCode;
          ISr.Location = ORr.Location;
          if (ReadFirstMain(ISr,2,true)) then begin
            ORrw.TotOrdQuant = ISr.Instock - ISr.OrddOut;
            MatRowPut(ORr,i,ORrw);
          end;
        end;
      end;
    end;
  
LGetItemStatusInfoForOrder:;

  RETURN;
END;

procedure GenerateOPVcFromVI(record VIVc VIr,var record OPVc OPr,var Integer result,var boolean createf)
begin
  record OPVc OP2r;
  record OPrsVc OPrsr;
  row OPVc OPrw,OP2rw;
  row VIVc VIrw;
  string 255 warning,objs;
  Boolean installmentf,TrHs,testf;
  val chk,bal;
  Integer rownr,rwcnt,i;
  
  rwcnt = MatRowCnt(VIr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VIr,i,VIrw);
    if (VIrw.stp==kInvoiceRowTypePrepayment) then begin
      bal = bal + VIrw.PrepayAmount;
    end;
  end;
  
  OPrsr.VINr = VIr.SerNr;
  OPrsr.TransType = 1;
  TrHs = true;
  while (LoopKey("VIKey",OPrsr,2,TrHs)) begin
    testf = true;
    if (OPrsr.VINr!=VIr.SerNr or OPrsr.TransType!=1) then begin TrHs = false; testf = false; end;
    if (OPrsr.VECode!=VIr.VECode) then begin testf = false; end;
    if (testf) then begin
      OP2r.SerNr = OPrsr.TransNr;
      if (ReadFirstMain(OP2r,1,true)) then begin
        rwcnt = MatRowCnt(OP2r);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(OP2r,i,OP2rw);
          if (OP2rw.VISerNr==VIr.SerNr) then begin
            bal = bal + OP2rw.RecVal;
            i = rwcnt;
          end;
        end;
      end;
    end;
  end;
  
  bal = VIr.PayVal - bal;
  if (bal<=0) then begin
    createf = false;
    goto LGenerateOPVcFromVI;
  end;
  
  RECORDNEW(OPr);
  rownr = 0;
  ClearRow(OPr,OPrw,kPaymentRowTypeNormal);
  OPrw.VISerNr = VIr.SerNr;
  MatRowPut(OPr,rownr,OPrw);
  if (PasteInvIn2OPr(OPr,rownr,OPr.TransDate,1,chk,warning,false,installmentf)==false) then begin
    result = -1;
    goto LGenerateOPVcFromVI;
  end;
  if (installmentf) then begin
    result = 20772;
    goto LGenerateOPVcFromVI;
  end;
  MatRowGet(OPr,rownr,OPrw);
  OPrw.VECode = VIr.VECode;
  MatRowPut(OPr,rownr,OPrw);
  OPVc_PasteVECode(OPr,rownr);
  MatRowGet(OPr,rownr,OPrw);
  OPrw.RecVal = bal;
  MatRowPut(OPr,rownr,OPrw);
  OPVc_PasteRecVal(OPr,rownr);
  MatRowGet(OPr,rownr,OPrw);
  OPrw.Objects = OPrw.Objects & "," & VIr.Objects;
  NoDupObjs(OPrw.Objects,objs);
  OPrw.Objects = objs;
  MatRowPut(OPr,rownr,OPrw);
  
LGenerateOPVcFromVI:;
  return;
end;

global
updating function Integer CreateOPFromVI(record VIVc VIr,var record OPVc OPr)
begin
  Integer res;
  boolean createf;
  
  createf = true;
  GenerateOPVcFromVI(VIr,OPr,res,createf);
  
  if (createf) then begin
    if (OPr.SerNr==-1) then begin
      OPr.SerNr = NextSerNr("OPVc",OPr.TransDate,-1,false,"");
    end;
    if (RecordInsert(OPr,true)) then begin
      CreateRecordLink(VIr,CurrentCompany,OPr,CurrentCompany);  
      CreateRecordLink(OPr,CurrentCompany,VIr,CurrentCompany);
    end else begin
      res = -1;
    end;
  end;
 
LCreateOPFromVI:;  
  CreateOPFromVI = res;
  return;
end;

global
updating function Integer CreateAutoPaidOPFromVI(record VIVc VIr)
begin
  record OPVc OPr,OP2r;
  record ObjVc Objr; 
  Integer res,pos;
  boolean createf;
  string 20 pmcode,curObj;
  
  createf = true;
  GenerateOPVcFromVI(VIr,OPr,res,createf);
  
  if (createf) then begin
    /*pos = 0;
    ExtractObj(VIr.Objects,pos,curObj);
    while (nonblank(curObj)) begin
      Objr.Code = curObj;
      if (ReadFirstMain(Objr,1,true) and Objr.OTCode=="STORE") then begin
        switch (Objr.Code) begin
          case "PEROVA":
            pmcode = "C1";
            pos = len(VIr.Objects);
          case "STALSKOGO":
            pmcode = "C2";
            pos = len(VIr.Objects);
        end;
      end;
      ExtractObj(VIr.Objects,pos,curObj);
    end;*/
    switch (CurrentCompany) begin
      case 1: pmcode = "C1";
      case 3: pmcode = "C2";
    end;
    if (NonBlank(pmcode)) then begin
      OPr.PayMode = pmcode;
      if (OPr.SerNr==-1) then begin
        OPr.SerNr = NextSerNr("OPVc",OPr.TransDate,-1,false,"");
      end;
      OPr.OrderedFlag = 1;
      if (RecordInsert(OPr,true)) then begin
        CreateRecordLink(VIr,CurrentCompany,OPr,CurrentCompany);  
        CreateRecordLink(OPr,CurrentCompany,VIr,CurrentCompany);
        RecordCopy(OP2r,OPr);
        OPr.DoneFlag = 1;
        if (RecordUpdate(OP2r,OPr,true)!=0) then begin
          res = -1;
        end;
      end else begin
        res = -1;
      end;
    end;
  end;
 
LCreateAutoPaidOPFromVI:;  
  CreateAutoPaidOPFromVI = res;
  return;
end;

global
updating function Integer DeleteAutoPaidOPFromVI(record VIVc VIr)
begin
  record OPVc OPr,OP2r;
  record OPrsVc OPrsr;
  Integer res,rwcnt;
  Boolean TrHs,testf;
  
  res = 0;
  
  OPrsr.VINr = VIr.SerNr;
  OPrsr.TransType = 1;
  TrHs = true;
  while (LoopKey("VIKey",OPrsr,2,TrHs)) begin
    testf = true;
    if (OPrsr.VINr!=VIr.SerNr or OPrsr.TransType!=1) then begin TrHs = false; testf = false; end;
    if (OPrsr.VECode!=VIr.VECode) then begin testf = false; end;
    if (testf) then begin
      OPr.SerNr = OPrsr.TransNr;
      if (ReadFirstMain(OPr,1,true)) then begin
        rwcnt = MatRowCnt(OPr);
        if (rwcnt==1) then begin
          RecordCopy(OP2r,OPr);
          OPr.DoneFlag = 0;
          if (RecordUpdate(OP2r,OPr,true)==0) then begin
            RecordCopy(OP2r,OPr);
            OPr.OrderedFlag = 0;
            if (RecordUpdate(OP2r,OPr,true)==0) then begin
              RecordDelete(OPr);
              StepBack(OPrsr);
            end;
          end;
        end;
      end;
    end;
  end;
 
LDeleteAutoPaidOPFromVI:;  
  DeleteAutoPaidOPFromVI = res;
  return;
end;

global //Edit***************************Sasha2,11:22 22.09.2016 {
updating procedure SetUnitTextInItemIfNeededMn(record RcVc RepSpec)
begin
  record INVc INr;	

	 if (NonBlank(RepSpec.f1)) then begin
	   INr.Code = "";
	   while (LoopMain(INr,1,true)) begin
  		if (Blank(INr.Unittext)) then begin
  		  INr.Unittext = RepSpec.f1;
  		  RECORDSTORE(INr,true);
  		end;
  	end;
	 end;

return;
end; //Edit***************************Sasha2,11:22 22.09.2016 }