external procedure FindRepDefHeader(string,string,var string);
remote updating function Integer CreateOPFromVI(record VIVc,var record OPVc);

global //Edit***************************Sasha2,13:36 07.12.2016 {
function Boolean CCPayTouchScreenSelfDClassOnEnterKey(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  record RcVc RepSpec;
  
  GetWindowRecord(wn,RepSpec);
  if (fieldname=="f1") then begin
    if (nonblank(RepSpec.f1)) then begin
      SelectButton(wn,"ProceedCCPayTouchScreenSelfDClass");
    end else begin
      WindowFieldGoto(wn,RepSpec,-1,"f1",false);
    end;
    res = false;
  end;

  CCPayTouchScreenSelfDClassOnEnterKey = res;
  return;
end; //Edit***************************Sasha2,13:36 07.12.2016 }

global
procedure INRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  record VarietyBlock Varb;
    
  BlockLoad(Varb);  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"INRClass");  
  RepSpec.flags[11] = 2;
  RepSpec.flags[22] = Varb.AutoVarietyDef;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure BalRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  string 255 tstr;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"BalRClass");  
  FindRepDefHeader(RepSpec.repname,RepSpec.shortname,tstr);
  RepSpec.f1 = tstr;
  RepSpec.AccSpec = 2; //Edit***************************Sasha2,11:12 17.10.2016
  if (HasLocalization("HRV")) then begin
    RepSpec.flags[20] = 1;
  end;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

procedure DoResRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  string 255 tstr;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ResRClass");  
  FindRepDefHeader(RepSpec.repname,RepSpec.shortname,tstr);
  RepSpec.f1 = tstr;
  RepSpec.flags[1] = 1;
  RepSpec.Stext = RepSpec.Period2Str;
  RepSpec.AccSpec = 2; //Edit***************************Sasha2,11:15 17.10.2016
  RepSpec.Comparison = 1; //Edit***************************Sasha2,11:15 17.10.2016
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure ResRClassReportDefaults(Integer wn)
begin
  DoResRClassReportDefaults(wn);
  return;
end;

global
updating procedure CreateOPFromVIDsm()
BEGIN
  record VIVc VIr; 
  record OPVc OPr;
  Integer wn,nwn,err;
  Integer acclevel;

  wn = CurWindow;
  acclevel = UserRegisterAccess("VIVc");
  //if (acclevel==kAccessLevelFull) or (acclevel==kAccessLevelReadNew) or (acclevel==kAccessLevelBrowseNew) then begin
    if (WindowState(wn)==Rs_normal) then begin
      GetWindowRecord(wn,VIr);     
      if (VIr.OKFlag!=0) then begin      
        err = CreateOPFromVI(VIr,OPr);
        if  (err==0) then begin
          if (MatRowCnt(OPr)>0) then begin
            nwn = OpenWindow("OPDClass",1,0,"","",OPr);
            /*if (WindowDoOK(nwn,0)) then begin
              CreateRecordLink(VIr,CurrentCompany,OPr,CurrentCompany);  
              CreateRecordLink(OPr,CurrentCompany,VIr,CurrentCompany);  
              UpdateBrowses("VIVc");
            end;*/    
          end else begin
            MessageBox(0,USetStr(22058) & " " & USetStr(50007) & " "  & USetStr(20102));
          end;   
        end else begin
          MessageBox(20802," " & USetStr(err));
        end;
      end else begin
        MessageBox(0,USetStr(50006));
      end;
    end else begin
      MessageBox(0,USetStr(1356));
    end;
  //end;
  RETURN;
END;

global //Edit***************************Sasha2,14:39 03.10.2016 {
updating procedure ClearUpSalesmanForAllPosInvoices()
begin
  record IVCashVc IVCashr,IVCashCurr;
  Boolean TrHs,testf;
  
    IVcashr.TransDate = CurrentDate;
    TrHs = true;
    while (LoopBackKey("TransDate",IVcashr,1,TrHs)) begin
      testf = true;
      if (Blank(IVcashr.SalesMan)) then begin
        testf = false; 
      end;
      if (testf) then begin
        IVcashr.InvComment = IVcashr.InvComment & " SalesMan:" & IVcashr.SalesMan;
        IVcashr.SalesMan = "";
        RECORDSTORE(IVcashr,true);
      end;
    end;
    MessageBox(0,"Готово");
  return;
end; //Edit***************************Sasha2,14:39 03.10.2016 }

global //Edit***************************Sasha2,14:39 03.10.2016 {
updating procedure GetNextIVcashInvoice()
begin
  record IVCashVc IVCashr;
  Boolean TrHs,testf;
  Integer wn;
    
    wn = CurWindow;
    if (GetWindowClass(wn)=="NPTSIVCashDClass") then begin
      testf = true;
      if (WindowState(wn)==Rs_insert) then begin
        testf = WindowDoOK(wn,0);
      end;
      if (testf) then begin
        DeselectWindow(wn,false);
        GetWindowRecord(wn,IVCashr);
        if (LoopMain(IVCashr,1,true) and LoopMain(IVCashr,1,true)) then begin
          if (NonBlank(IVcashr.SalesMan)) then begin
            CloseWindow(wn);
            OpenWindow("NPTSIVCashDClass",1,0,"","",IVCashr);
          end;
        end;
        WindowFieldGoto(wn,IVCashr,-1,"ivcashcommand",true);
      end;
    end;
  return;
end; //Edit***************************Sasha2,14:39 03.10.2016 }

global //Edit***************************Sasha2,14:39 03.10.2016 {
updating procedure GetPrevIVcashInvoice()
begin
  record IVCashVc IVCashr;
  Boolean TrHs,testf;
  Integer wn;
    
    wn = CurWindow;
    if (GetWindowClass(wn)=="NPTSIVCashDClass") then begin
      testf = true;
      if (WindowState(wn)==Rs_insert) then begin
        testf = WindowDoOK(wn,0);
      end;
      if (testf) then begin
        DeselectWindow(wn,false);
        GetWindowRecord(wn,IVCashr);
        if (LoopBackKey("SerNr",IVCashr,1,true) and LoopBackKey("SerNr",IVCashr,1,true)) then begin
          if (NonBlank(IVcashr.SalesMan)) then begin
            CloseWindow(wn);
            OpenWindow("NPTSIVCashDClass",1,0,"","",IVCashr);
          end;
        end;
        WindowFieldGoto(wn,IVCashr,-1,"ivcashcommand",true);
      end;
    end;
  return;
end; //Edit***************************Sasha2,14:39 03.10.2016 }

global //Edit***************************Sasha2,14:39 03.10.2016 {
updating procedure OpenNewIVcashInvoice()
begin
  record IVCashVc IVCashr;
  Boolean TrHs,testf;
  Integer wn;
    
    //RECORDNEW(IVCashr);
    wn = CurWindow;
    switch (GetWindowClass(wn)) begin
      case "NPTSIVCashDClass":
        testf = true;
        if (WindowState(wn)==Rs_insert) then begin
          testf = false; /*WindowDoOK(wn,0)*/
        end;
        if (testf) then begin
          WINDOWDONEW(wn,0);
        end;
      otherwise
        wn = OpenWindow("NPTSIVCashLClass",1,0,"","",IVCashr);
        WindowDoNew(wn,0);
    end;
    //OpenWindow("NPTSIVCashDClass",1,wn,"","",IVCashr);
  return;
end; //Edit***************************Sasha2,14:39 03.10.2016 }

global //Edit***************************Sasha2,14:39 03.10.2016 {
updating procedure OpenFiscalPrintingSetting()
begin
  record RcVc RepSpec;
  Boolean TrHs,testf;
  Integer wn;
    
    RECORDNEW(RepSpec);
    OpenWindow("FiscalPrintingTClass",1,0,"","",RepSpec);
  return;
end; //Edit***************************Sasha2,14:39 03.10.2016 }

global //Edit***************************Sasha2,14:39 03.10.2016 {
procedure ShowMoneyInBoxForIVCash()
begin
  record FiscalSetLocalBlock Fiskalblock;
  Integer wn;
  string 30 inBoxFilePath;
  area inBoxArea;
  val money;
    
    BlockLoad(Fiskalblock);
    inBoxFilePath = Fiskalblock.StoragePath & "\\" & "InBox.txt";
    
    wn = CurWindow;
    if (GetWindowClass(wn)=="NPTSIVCashDClass") then begin
      money = -1;
      if (FileExists(inBoxFilePath)) then begin
        AddFileToArea(inBoxFilePath,inBoxArea,false);
        money = StringToVal(GetStringFromArea(inBoxArea,0,255),M4Val);
      end;
      PutWindowString(wn,"DisplayMoneyInBox",money); 
    end;
  return;
end; //Edit***************************Sasha2,14:39 03.10.2016 }

global
function Boolean NPTSIVCashLClassOnOpenWindow(Integer wn)
begin
  
    SetWindowSubset(wn,CurrentUser);
  
  NPTSIVCashLClassOnOpenWindow = false;
end;